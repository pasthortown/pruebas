package com.corlasosa.kfc.despachador.formateado;

import com.corlasosa.kfc.despachador.Configuraciones;
import com.corlasosa.kfc.despachador.ProcesaFactura;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.math.BigDecimal;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

public class IntroPageFactura implements Printable {
  private String tabla = null;
  
  private String formato = "";
  
  private int tamanio;
  
  public String getFuente() {
    return this.formato;
  }
  
  public void setFuente(String formato) {
    this.formato = formato;
  }
  
  public int getTamanio() {
    return this.tamanio;
  }
  
  public void setTamanio(int tamanio) {
    this.tamanio = tamanio;
  }
  
  public String getTabla() {
    return this.tabla;
  }
  
  public void setTabla(String tabla) {
    this.tabla = tabla;
  }
  
  public int ValidaTitulos(String psCadena) {
    int valor = 0;
    String lsCadena = "CNT,VALOR TOTAL,ORDEN,VALOR A PAGAR,DESCRIPCI;
    String[] arreglo = lsCadena.split(",");
    for (int i = 0; i < arreglo.length; i++) {
      if (psCadena.indexOf(arreglo[i]) >= 0)
        valor = 1; 
    } 
    return valor;
  }
  
  public void drawCenteredString(String s, int w, int h, Graphics g, int py) {
    FontMetrics fm = g.getFontMetrics();
    int x = (w - fm.stringWidth(s)) / 2;
    g.drawString(s, x, py);
  }
  
  public void drawStringDerA(Graphics g, String line, int wc, int lineW, int y, int valor) {
    g.drawString(line, valor - lineW, y);
  }
  
  public int print(Graphics g, PageFormat pageFormat, int page) {
    Properties lconfiguraciones = (new Configuraciones()).getPropiedades();
    try {
      Graphics2D g2d = (Graphics2D)g;
      g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
      int lInicio = 0;
      int lFin = 0;
      String lLinea = null;
      boolean lbBandera = false;
      String lLineaAux = null;
      int x = 0;
      int y = 0;
      String ptabla = this.tabla;
      x = 10;
      y = 10;
      int i = 0;
      do {
        if (i < 1) {
          lInicio = ptabla.indexOf("<");
          lFin = ptabla.indexOf(">");
          lLinea = ptabla.substring(lInicio + 1, lFin);
          String cadenaImp = ptabla.substring(lInicio + 1, lFin);
          String linea1 = cadenaImp;
          Font linea1Font = new Font(this.formato, 1, this.tamanio);
          lLineaAux = ptabla.substring(ptabla.indexOf(">") + 1, ptabla.length());
          g2d.setFont(linea1Font);
          g2d.getFontMetrics(linea1Font);
          if (i <= 3) {
            Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
            g2d.setFont(fuenteTitulo);
          } 
          drawCenteredString(linea1, Integer.parseInt("200"), Integer.parseInt("100"), g2d, y);
        } else {
          lInicio = lLineaAux.indexOf("<");
          lFin = lLineaAux.indexOf(">");
          lLinea = String.valueOf(lLinea) + lLineaAux.substring(lInicio + 1, lFin);
          String cadenaImp = lLineaAux.substring(lInicio + 1, lFin);
          String linea2 = cadenaImp;
          Font linea2Font = new Font(this.formato, 2, this.tamanio);
          lLineaAux = lLineaAux.substring(lLineaAux.indexOf(">") + 1, lLineaAux.length());
          g2d.setFont(linea2Font);
          FontMetrics linea2FontMetrics = g2d.getFontMetrics(linea2Font);
          if (linea2.indexOf("SgmenA") >= 0) {
            String[] arreglo = linea2.split("SgmenA");
            if (ValidaTitulos(arreglo[0]) == 1) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
              g2d.drawString(arreglo[0], 10, y);
              g2d.drawString(arreglo[1], 30, y);
              g2d.drawString(arreglo[2], 140, y);
              g2d.drawString(arreglo[3], 165, y);
            } else {
              g2d.drawString(arreglo[0], 11, y);
              g2d.drawString(arreglo[1].trim(), 30, y);
              g2d.drawString(arreglo[2], 141, y);
              g2d.drawString("   " + arreglo[3], 166, y);
            } 
          } else if (linea2.indexOf("SgmenC") >= 0) {
            String[] arreglo = linea2.split("SgmenC");
            g2d.drawString(arreglo[0], 30, y);
          } else if (linea2.indexOf("SgmenB") >= 0) {
            String[] arreglo = linea2.split("SgmenB");
            if (ValidaTitulos(arreglo[0]) == 1) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            drawStringDerA(g2d, arreglo[0], arreglo[0].length(), linea2FontMetrics.stringWidth(arreglo[0]), y, 150);
            drawStringDerA(g2d, arreglo[1], arreglo[1].length(), linea2FontMetrics.stringWidth(arreglo[1]), y, 180);
          } else if (linea2.indexOf(lconfiguraciones.getProperty("qr.url_search")) >= 0) {
            QRCodeWriter writer = new QRCodeWriter();
            String anchoQr = lconfiguraciones.getProperty("qr.size_width"), altoQr = lconfiguraciones.getProperty("qr.size_height");
            int width = Integer.parseInt(anchoQr), height = Integer.parseInt(altoQr);
            BigDecimal widthCenter = new BigDecimal(width / 2);
            int imageCenter = widthCenter.intValue();
            BigDecimal asd = new BigDecimal(width * 0.6D);
            int dfg = asd.intValue();
            BufferedImage image = new BufferedImage(width, height, 1);
            int white = 16777215;
            int black = 0;
            try {
              BitMatrix bitMatrix = writer.encode(linea2, BarcodeFormat.QR_CODE, width, height);
              for (int ii = 0; ii < width; ii++) {
                for (int j = 0; j < height; j++)
                  image.setRGB(ii, j, bitMatrix.get(ii, j) ? black : white); 
              } 
              g2d.drawImage(Toolkit.getDefaultToolkit().createImage(image.getSource()), (y / 2 - width - 2 * x) / 2, y - 8, width, height, null);
            } catch (WriterException e) {
              e.printStackTrace();
            } catch (Exception e) {
              e.printStackTrace();
            } 
          } else if (ValidaTitulos(linea2) == 1) {
            Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
            g2d.setFont(fuenteTitulo);
            g2d.drawString(linea2, x, y);
          } else {
            if (linea2.indexOf("RUC:") >= 0)
              if (linea2.substring(0, 4).equals("RUC:")) {
                lbBandera = true;
                Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
                g2d.setFont(fuenteTitulo);
              }  
            if (!lbBandera && i <= 3) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (linea2.indexOf("FACTURA") >= 0) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (linea2.indexOf("tituloQR ") >= 0) {
              String tituloQr = linea2.substring(9, linea2.length());
              linea2 = tituloQr;
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (i <= 11) {
              drawCenteredString(linea2.trim(), Integer.parseInt("200"), Integer.parseInt("100"), g2d, y);
            } else {
              g2d.drawString(linea2, x, y);
            } 
          } 
        } 
        y += 9;
        i++;
      } while (lLineaAux.indexOf(">") > 0);
    } catch (Exception ex) {
      Logger.getLogger(ProcesaFactura.class.getName()).log(Level.SEVERE, (String)null, ex);
    } 
    return 0;
  }
}
