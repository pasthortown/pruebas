package com.corlasosa.kfc.despachador.formateado;

import com.corlasosa.kfc.despachador.Configuraciones;
import com.corlasosa.kfc.despachador.ProcesaFactura;
import com.corlasosa.kfc.util.SingletonConexionDB;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.pdf417.PDF417Writer;
import com.google.zxing.pdf417.encoder.Dimensions;
import com.google.zxing.qrcode.QRCodeWriter;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.io.File;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

public class IntroPageFactura implements Printable {
  private String tabla = null;
  
  private String formato = "";
  
  private int tamanio;
  
  private int aumentoTamanioLetraOrden;
  
  public String getFuente() {
    return this.formato;
  }
  
  public void setFuente(String formato) {
    this.formato = formato;
  }
  
  public int getTamanio() {
    return this.tamanio;
  }
  
  public void setTamanio(int tamanio) {
    this.tamanio = tamanio;
  }
  
  public String getTabla() {
    return this.tabla;
  }
  
  public void setTabla(String tabla) {
    this.tabla = tabla;
  }
  
  public int getAumentoTamanioLetraOrden() {
    return this.aumentoTamanioLetraOrden;
  }
  
  public void setAumentoTamanioLetraOrden(int aumentoTamanioLetraOrden) {
    this.aumentoTamanioLetraOrden = aumentoTamanioLetraOrden;
  }
  
  public int ValidaTitulos(String psCadena) {
    int valor = 0;
    String lsCadena = "CNT,VALOR TOTAL,VALOR A PAGAR,DESCRIPCI;
    String[] arreglo = lsCadena.split(",");
    for (int i = 0; i < arreglo.length; i++) {
      if (psCadena.indexOf(arreglo[i]) >= 0)
        valor = 1; 
    } 
    return valor;
  }
  
  public void drawCenteredString(String s, int w, int h, Graphics g, int py) {
    FontMetrics fm = g.getFontMetrics();
    int x = (w - fm.stringWidth(s)) / 2;
    g.drawString(s, x, py);
  }
  
  public void drawStringDerA(Graphics g, String line, int wc, int lineW, int y, int valor) {
    g.drawString(line, valor - lineW, y);
  }
  
  public int print(Graphics g, PageFormat pageFormat, int page) {
    Properties lconfiguraciones = (new Configuraciones()).getPropiedades();
    try {
      Graphics2D g2d = (Graphics2D)g;
      g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
      int lInicio = 0;
      int lFin = 0;
      String lLinea = null;
      boolean lbBandera = false;
      String lLineaAux = null;
      int x = 0;
      int y = 0;
      String ptabla = this.tabla;
      x = 10;
      y = 10;
      int i = 0;
      do {
        if (i < 1) {
          lInicio = ptabla.indexOf("<");
          lFin = ptabla.indexOf(">");
          lLinea = ptabla.substring(lInicio + 1, lFin);
          String cadenaImp = ptabla.substring(lInicio + 1, lFin);
          String linea1 = cadenaImp;
          Font linea1Font = new Font(this.formato, 1, this.tamanio);
          lLineaAux = ptabla.substring(ptabla.indexOf(">") + 1, ptabla.length());
          g2d.setFont(linea1Font);
          g2d.getFontMetrics(linea1Font);
          if (i <= 3) {
            Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
            g2d.setFont(fuenteTitulo);
          } 
          drawCenteredString(linea1, Integer.parseInt("200"), Integer.parseInt("100"), g2d, y);
        } else {
          lInicio = lLineaAux.indexOf("<");
          lFin = lLineaAux.indexOf(">");
          System.out.println(lLineaAux.substring(lInicio + 1, lFin));
          lLinea = String.valueOf(lLinea) + lLineaAux.substring(lInicio + 1, lFin);
          String cadenaImp = lLineaAux.substring(lInicio + 1, lFin);
          String linea2 = cadenaImp;
          Font linea2Font = new Font(this.formato, 2, this.tamanio);
          lLineaAux = lLineaAux.substring(lLineaAux.indexOf(">") + 1, lLineaAux.length());
          g2d.setFont(linea2Font);
          FontMetrics linea2FontMetrics = g2d.getFontMetrics(linea2Font);
          if (linea2.indexOf("SgmenA") >= 0) {
            String[] arreglo = linea2.split("SgmenA");
            if (ValidaTitulos(arreglo[0]) == 1) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
              g2d.drawString(arreglo[0], 1, y);
              g2d.drawString(arreglo[1], 75, y);
              g2d.drawString(arreglo[2], 150, y);
              if (arreglo.length == 4)
                g2d.drawString(arreglo[3], 165, y); 
            } else {
              g2d.drawString(arreglo[0], 1, y);
              g2d.drawString(arreglo[1].trim(), 100, y);
              g2d.drawString(arreglo[2], 150, y);
              if (arreglo.length == 4)
                g2d.drawString("   " + arreglo[3], 166, y); 
            } 
          } else if (linea2.indexOf("SgmenC") >= 0) {
            String[] arreglo = linea2.split("SgmenC");
            g2d.drawString(arreglo[0], 30, y);
          } else if (linea2.indexOf("SgmenB") >= 0) {
            String[] arreglo = linea2.split("SgmenB");
            if (ValidaTitulos(arreglo[0]) == 1) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            drawStringDerA(g2d, arreglo[0], arreglo[0].length(), linea2FontMetrics.stringWidth(arreglo[0]), 
                y, 150);
            drawStringDerA(g2d, arreglo[1], arreglo[1].length(), linea2FontMetrics.stringWidth(arreglo[1]), 
                y, 180);
          } else if (linea2.indexOf("PDF417") >= 0) {
            PDF417Writer writer = new PDF417Writer();
            String anchoQr = lconfiguraciones.getProperty("qr.417.size_width");
            String largoQR = lconfiguraciones.getProperty("qr.417.size_height");
            int width = Integer.parseInt(anchoQr), height = Integer.parseInt(largoQR);
            String cfac_id = linea2.substring(linea2.indexOf(":") + 1, linea2.length());
            String TED = buscaRespuestaTED(cfac_id);
            int white = 16777215;
            int black = 0;
            try {
              Map<Object, Object> hints = new HashMap<>();
              hints.put(EncodeHintType.MARGIN, Integer.valueOf(2));
              hints.put(EncodeHintType.PDF417_DIMENSIONS, new Dimensions(1, 11, 4, 80));
              BitMatrix bitMatrix = writer.encode(TED, BarcodeFormat.PDF_417, width, height, hints);
              BufferedImage image = new BufferedImage(bitMatrix.getWidth(), bitMatrix.getHeight(), 1);
              MatrixToImageWriter.writeToStream(bitMatrix, "png", new FileOutputStream(new File("C://impresionKFC//pdf417_123456789.png")));
              System.out.println("W" + bitMatrix.getWidth() + " - " + bitMatrix.getHeight());
              for (int ii = 0; ii < bitMatrix.getWidth(); ii++) {
                for (int j = 0; j < bitMatrix.getHeight(); j++)
                  image.setRGB(ii, j, bitMatrix.get(ii, j) ? black : white); 
              } 
              System.out.println(String.valueOf(width) + "-" + height);
              BufferedImage croppedImage = image.getSubimage(0, 0, bitMatrix.getWidth(), bitMatrix.getHeight());
              g2d.drawImage(Toolkit.getDefaultToolkit().createImage(croppedImage.getSource()), 
                  2, y - 6, (int)(bitMatrix.getWidth() * 0.8D), (int)(bitMatrix.getHeight() * 0.65D), null);
            } catch (WriterException e) {
              e.printStackTrace();
            } catch (Exception e) {
              e.printStackTrace();
            } 
          } else if (linea2.indexOf(lconfiguraciones.getProperty("qr.url_search")) >= 0) {
            QRCodeWriter writer = new QRCodeWriter();
            String anchoQr = lconfiguraciones.getProperty("qr.size_width");
            String altoQr = lconfiguraciones.getProperty("qr.size_height");
            int width = Integer.parseInt(anchoQr), height = Integer.parseInt(altoQr);
            BigDecimal widthCenter = new BigDecimal(width / 2);
            int imageCenter = widthCenter.intValue();
            BigDecimal asd = new BigDecimal(width * 0.6D);
            int dfg = asd.intValue();
            BufferedImage image = new BufferedImage(width, height, 1);
            int white = 16777215;
            int black = 0;
            try {
              BitMatrix bitMatrix = writer.encode(linea2, BarcodeFormat.QR_CODE, width, height);
              for (int ii = 0; ii < width; ii++) {
                for (int j = 0; j < height; j++)
                  image.setRGB(ii, j, bitMatrix.get(ii, j) ? black : white); 
              } 
              g2d.drawImage(Toolkit.getDefaultToolkit().createImage(image.getSource()), (
                  y / 2 - width - 2 * x) / 2 - 30, y - 8, width, height, null);
            } catch (WriterException e) {
              e.printStackTrace();
            } catch (Exception e) {
              e.printStackTrace();
            } 
          } else if (ValidaTitulos(linea2) == 1) {
            Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
            g2d.setFont(fuenteTitulo);
            g2d.drawString(linea2, x, y);
          } else {
            if (linea2.indexOf("RUC:") >= 0)
              if (linea2.substring(0, 4).equals("RUC:")) {
                lbBandera = true;
                Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
                g2d.setFont(fuenteTitulo);
              }  
            if (!lbBandera && i <= 3) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (linea2.indexOf("FACTURA") >= 0) {
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (linea2.indexOf("tituloQR ") >= 0) {
              String tituloQr = linea2.substring(9, linea2.length());
              linea2 = tituloQr;
              Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
              g2d.setFont(fuenteTitulo);
            } 
            if (i <= 15) {
              drawCenteredString(linea2.trim(), Integer.parseInt("200"), Integer.parseInt("100"), g2d, 
                  y);
            } else if (linea2.indexOf("ORDEN") >= 0) {
              impresionSeccionOrden(g2d, x, y, linea2);
            } else {
              g2d.drawString(linea2, x, y);
            } 
          } 
        } 
        y += 9;
        i++;
      } while (lLineaAux.indexOf(">") > 0);
    } catch (Exception ex) {
      Logger.getLogger(ProcesaFactura.class.getName()).log(Level.SEVERE, (String)null, ex);
    } 
    return 0;
  }
  
  public void impresionSeccionOrden(Graphics2D g2d, int x, int y, String lineaOrden) {
    Font fuenteTitulo = new Font(this.formato, 1, this.tamanio);
    Font fuenteNumeroOrden = new Font(this.formato, 1, this.tamanio + getAumentoTamanioLetraOrden());
    String[] ordenSegmentada = lineaOrden.split(" ");
    if (ordenSegmentada.length == 3) {
      g2d.setFont(fuenteTitulo);
      drawCenteredString(lineaOrden.trim(), Integer.parseInt("200"), Integer.parseInt("100"), g2d, 
          y);
    } else if (ordenSegmentada.length == 4) {
      String informacionFactura = String.valueOf(ordenSegmentada[2]) + " " + ordenSegmentada[3];
      g2d.setFont(fuenteTitulo);
      g2d.drawString(ordenSegmentada[0], x, y);
      g2d.setFont(fuenteNumeroOrden);
      g2d.drawString(ordenSegmentada[1], x + 30, y);
      g2d.setFont(fuenteTitulo);
      g2d.drawString(informacionFactura, x + 65, y);
    } 
  }
  
  public String buscaRespuestaTED(String cfac_id) throws SQLException {
    Properties lconfiguraciones = (new Configuraciones()).getPropiedades();
    SingletonConexionDB lServicioConexion = new SingletonConexionDB();
    lServicioConexion.setUsuario(lconfiguraciones.getProperty("spring.datasource.username"));
    lServicioConexion.setClave(lconfiguraciones.getProperty("spring.datasource.password"));
    lServicioConexion.setUrlConexion(lconfiguraciones.getProperty("spring.datasource.url"));
    String lsQuery = lconfiguraciones.getProperty("qr.417.query");
    String lsComandos = "";
    PreparedStatement l_ps = null;
    ResultSet lrs = null;
    try {
      Connection con = lServicioConexion.obtenerConexion();
      if (cfac_id.length() > 0) {
        l_ps = null;
        l_ps = con.prepareStatement(lsQuery);
        l_ps.setString(1, cfac_id);
        lrs = l_ps.executeQuery();
        while (lrs.next())
          lsComandos = lrs.getString("TED"); 
      } 
    } catch (Throwable ex) {
      l_ps.close();
      lsComandos = "";
      ex.printStackTrace();
    } finally {
      if (l_ps != null)
        l_ps.close(); 
    } 
    return lsComandos;
  }
}
